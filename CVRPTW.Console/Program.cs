using CVRPTW.Datasets;
using CVRPTW.Models.HereMapsApi;
using Newtonsoft.Json;
using System;
using System.Linq;

namespace CVRPTW
{
    class Program
    {
        static string response = "{\"matrixId\":\"dec03816-fd9d-4c1a-86f1-29b51365e379\",\"matrix\":{\"numOrigins\":30,\"numDestinations\":30,\"travelTimes\":[0,494,382,1109,902,693,1047,1012,839,1071,1050,1051,1038,517,940,872,532,266,176,1248,680,1481,871,1088,836,527,444,944,736,957,463,0,861,777,570,361,715,743,507,752,718,782,769,278,764,505,96,313,387,858,504,1091,539,846,587,423,250,612,404,625,376,689,0,1304,1097,888,1242,1207,1034,1266,1245,1246,1233,712,1135,1067,727,461,295,1371,875,1347,1066,1283,1031,599,639,1139,1063,1152,986,674,1254,0,238,483,343,279,308,380,112,318,305,725,572,472,570,865,910,408,585,649,385,376,373,967,758,240,606,148,748,436,1016,348,0,245,286,289,70,323,289,328,315,487,498,234,332,627,672,352,347,558,147,386,327,729,520,183,368,196,669,357,875,562,355,0,500,503,292,537,503,542,529,429,692,445,253,548,593,521,432,727,324,600,527,662,438,397,147,410,969,657,1237,339,221,466,0,195,291,66,280,234,276,708,543,455,553,986,893,391,487,597,368,347,344,947,741,115,589,187,1047,695,1445,499,232,477,184,0,302,128,440,39,137,629,404,293,564,847,980,368,348,574,379,208,205,808,663,276,600,347,852,540,1120,391,182,349,329,332,0,366,332,371,358,591,602,331,436,731,776,389,451,595,77,429,424,833,624,226,397,239,1120,690,1518,371,254,499,56,129,324,0,312,168,210,702,477,366,586,920,1053,424,421,630,401,281,278,881,736,148,622,219,1031,719,1299,123,283,528,280,446,353,317,0,485,379,770,646,517,615,910,955,453,630,659,430,450,447,1012,803,177,651,85,1086,734,1484,538,271,516,223,39,341,167,479,0,176,668,443,332,603,886,1019,407,387,613,418,247,244,847,702,315,639,386,1171,860,1569,580,411,656,422,307,481,366,521,346,0,753,407,524,877,971,1104,547,472,753,558,156,386,745,787,415,779,428,511,266,909,850,643,447,703,588,580,647,791,627,614,0,516,465,283,311,444,861,256,1067,575,664,412,272,81,685,570,698,993,678,1391,720,645,649,562,447,582,506,661,486,425,575,0,438,695,793,926,687,294,893,662,386,333,567,609,555,772,568,807,481,1205,437,314,465,375,297,243,356,378,336,323,442,420,0,498,681,731,429,285,635,320,435,211,684,475,272,588,285,450,104,718,710,503,294,648,749,440,685,651,788,775,284,770,511,0,408,374,791,510,1024,472,852,593,456,301,545,337,558,214,311,612,981,774,565,895,780,711,839,922,819,806,285,708,675,370,0,147,1103,448,1336,743,856,604,345,212,816,608,829,42,402,275,1017,810,601,955,929,747,988,958,968,955,434,857,780,440,183,0,1156,597,1389,779,1005,753,523,361,852,644,865,1232,879,1354,226,310,601,373,351,489,410,288,390,377,938,644,544,775,1111,1156,0,802,206,415,448,445,1181,1001,270,655,324,724,384,1122,639,432,355,447,332,369,391,580,371,358,306,260,249,401,524,657,654,0,860,368,408,156,485,340,474,478,487,1369,1056,1238,424,508,793,571,549,687,608,486,588,575,1136,842,742,952,1248,1293,198,1000,0,613,646,643,1358,1203,468,786,522,831,519,1101,465,256,328,403,406,74,440,406,445,432,544,668,405,415,710,755,312,408,518,0,503,498,831,607,300,387,313,1132,821,1530,541,372,617,383,268,442,327,482,307,151,714,368,485,838,932,1065,508,433,714,519,0,347,706,748,376,740,389,841,523,1239,565,442,507,373,258,371,317,506,297,284,423,237,187,540,641,774,498,142,704,448,287,0,602,457,400,630,413,434,453,584,1107,900,687,897,782,837,841,1048,821,735,287,548,722,477,371,392,1243,450,1476,872,696,606,0,217,942,789,955,459,262,857,893,686,470,738,623,623,682,834,662,649,87,551,513,303,259,392,941,291,1147,655,699,447,223,0,728,615,741,854,542,1122,284,106,351,222,176,176,259,225,215,202,593,469,340,438,733,778,276,453,482,253,273,270,835,626,0,474,132,717,397,977,667,460,149,605,608,431,642,608,647,634,534,797,550,293,596,641,535,537,768,372,705,632,699,544,502,0,515,946,634,1214,152,198,443,195,361,268,232,93,400,294,685,561,432,530,825,870,368,545,574,345,365,362,927,718,92,566,0],\"distances\":[0,3104,1538,10161,8369,5740,9468,9126,7679,9568,9688,9433,9543,3537,7820,7271,3647,1279,1097,9626,5331,11160,7670,9516,6816,3602,2933,8704,5659,9045,2999,0,4395,7631,5839,3210,6938,7410,5149,7186,7158,7717,7827,2450,6542,4703,689,2133,2760,7922,4001,9456,5140,8090,5384,3491,1876,6174,3129,6515,1867,4312,0,11369,9577,6948,10676,10334,8887,10776,10896,10641,10751,4745,9028,8479,4855,2487,1904,10032,6539,11314,8878,10724,8024,4172,4141,9912,6235,10253,10027,7442,11205,0,2709,5571,2283,3762,3180,2531,773,4069,4179,7703,7493,4624,6753,9711,9788,5472,6259,6534,4091,4914,5323,9720,8092,1519,6464,1068,7318,4733,8496,2953,0,2862,2260,3412,471,2508,2480,3719,3829,4994,5304,1915,4044,7002,7079,4865,3550,6334,1382,4564,3304,7011,5383,1496,3755,1837,5648,3063,6325,5613,3821,0,4920,6072,3131,5168,5140,6379,6489,3653,6207,4368,2374,5332,5409,5390,3666,6859,3122,7224,5049,5268,3770,4156,995,4497,9370,6785,10548,2331,2052,4914,0,1376,2523,414,1858,1683,2277,7046,5591,3967,6096,8802,9131,4815,4783,6284,3434,3012,3421,8538,7435,816,5807,1215,8978,7325,10374,3615,3164,6026,1370,0,3635,956,3142,307,1307,5977,4621,2928,7208,7832,8739,5928,3813,7397,4546,2042,2451,7568,6492,2100,6919,2499,7597,5012,8775,3212,1199,3141,2519,3671,0,2767,2739,3978,4088,5273,5583,2194,4323,7281,7358,4451,3829,5920,911,4823,3583,7290,5662,1755,3589,2096,9534,7113,10930,2659,2380,5242,414,962,2851,0,2186,1269,1863,6533,5177,3484,6424,8388,9295,5143,4369,6612,3762,2598,3007,8124,7048,1144,6135,1543,9648,7063,10826,821,2330,5192,1858,3068,2801,2106,0,3375,3771,7324,7085,4245,6374,9332,9409,5093,5880,6562,3712,4506,4915,9341,7713,1094,6085,643,9285,7632,10681,3922,3471,6333,1677,307,3942,1263,3449,0,1614,6284,4928,3235,7515,8139,9046,6235,4120,7704,4853,2349,2758,7875,6799,2407,7226,2806,9697,8391,11093,5990,5162,8024,3916,3060,5633,3502,5517,3367,0,6696,3701,4796,8536,8551,9458,7926,4532,9395,6544,1174,3290,7324,7211,4533,8917,4874,3428,2450,4824,7756,5964,3652,6856,6000,5274,6442,7283,6307,6417,0,4694,4282,2595,2282,3189,8816,2205,10285,5563,6390,3690,2018,606,6299,4545,6640,7678,6507,9074,7609,6310,6172,5535,4679,5620,5121,7136,4986,3694,4677,0,3685,6652,6532,7439,9545,2513,11014,6632,3400,2350,5305,5192,6152,7065,6493,7166,4703,8562,4148,2858,4368,3455,3013,2168,3455,3675,3320,3430,4282,3685,0,4848,6340,6927,6094,2610,7563,3079,3656,1789,6299,4671,2691,5261,3032,3442,689,4620,7057,5265,2636,6364,7555,4575,6612,6584,7862,7972,2595,6687,4848,0,3060,3203,7348,4146,8882,4566,8235,5529,3800,2185,5600,2555,5941,1170,2133,2566,9299,7507,4878,8727,7871,6817,8313,8826,8178,8288,2282,6565,6340,3060,0,931,9269,4076,10803,6808,8261,5561,2854,1678,7842,4797,8183,395,2885,1853,9942,8150,5521,9249,8907,7460,9349,9469,9214,9324,3318,7601,7052,3428,1060,0,9407,5112,10941,7451,9297,6597,3655,2714,8485,5440,8826,10224,7853,10329,2932,4809,5472,4700,5862,4356,4948,3349,6169,6279,8725,9593,6724,7164,9908,9985,0,7281,1469,3445,7014,7423,10848,8883,3936,5625,3644,5243,3994,6639,6312,4520,3659,4703,3847,3830,4289,5839,4154,4264,2242,2541,2707,4139,4097,5004,7372,0,8841,4119,4237,1537,3833,2757,4855,4552,5196,10855,9140,11150,4409,6286,7274,6177,7339,5833,6425,4826,7646,7756,10202,11070,8201,8451,10539,10616,1477,8758,0,4922,8491,8900,12135,10520,5413,6804,5121,7558,4973,8683,4123,2110,3102,3430,4582,911,3678,3650,4889,4999,5522,6619,3105,4284,7242,7319,3540,4078,5009,0,5734,4494,7178,5680,2666,3353,3007,9403,8097,10799,5696,4868,7730,3622,2766,5339,3208,5223,3073,1225,6402,3407,4502,8242,8257,9164,7632,4238,9101,6250,0,2996,7030,6917,4239,8623,4580,6527,5215,7923,5462,4172,4880,3451,2595,3482,3037,4989,2902,3012,3526,2151,1620,5360,5381,6288,7461,1362,8930,4393,2961,0,5117,4041,4005,5773,4346,3280,3362,4171,9773,7981,5267,8463,7607,7291,8049,9300,7914,7285,2018,5295,6299,3671,2754,2885,10652,3812,12186,7197,6991,5297,0,1498,8316,5859,8657,2824,1876,4220,8190,6398,3769,7387,6531,5708,6973,7717,6838,6948,606,5225,4671,2185,1678,2585,8952,2736,10421,5699,6921,4221,1498,0,6733,4373,7074,8554,5969,9732,2053,1236,4098,1360,2260,1707,1608,1580,2567,2677,6230,5991,3151,5280,8238,8315,3999,4786,5468,2618,3412,3821,8247,6619,0,4991,937,5562,3009,5825,6506,4714,995,5813,6965,3578,6061,6033,7272,7382,4546,7100,5261,2320,5246,5323,5466,4559,7000,3381,8117,5942,6004,4389,5049,0,5390,9005,6420,10183,1116,1687,4549,1215,2425,2158,1463,643,2732,3128,6681,6442,3602,5731,8689,8766,4450,5237,5919,3069,3863,4272,8698,7070,451,5442,0]},\"regionDefinition\":{\"type\":\"boundingBox\",\"west\":172.5174277961,\"south\":-43.5334978874869,\"east\":172.640193868459,\"north\":-43.4693022074228}}";

        static void Main(string[] args)
        {
            //MatrixTest();

            TestDatasetModelTest();

            Console.ReadLine();
        }

        private static void TestDatasetModelTest()
        {
            var testDatasetModel = new TestDatasetModel(TestDatasetType.With10Data);

            foreach (var dataset in testDatasetModel.datasets)
            {
                Console.WriteLine($"Id: {dataset.Id}");
            }
        }

        private static void MatrixTest()
        {
            var dataModel = new TestDataModelBuilder();
            var locations = dataModel.GetLocations();

            foreach (var location in locations)
            {
                Console.WriteLine($"{location.Latitude} {location.Longitude}");
            }

            // 1. Get Time Matrix from HereMaps Routing Matrix
            // HereMaps API Key : CSS9-wcSTwQ9W6IBP2ARif56ZI2nVHLpwBrP0vto9g4

            var origins = locations.Select(l =>
            {
                return new RoutingMatrixRequestModel.Coordinates
                {
                    Latitude = l.Latitude,
                    Longitude = l.Longitude
                };
            });

            var model = new RoutingMatrixRequestModel
            {
                Origins = origins.ToArray(),
                RegionDefinition = new RoutingMatrixRequestModel.RegionModel
                {
                    West = origins.Min(o => o.Longitude),
                    East = origins.Max(o => o.Longitude),
                    North = origins.Max(o => o.Latitude),
                    South = origins.Min(o => o.Latitude)
                }
            };


            //var apiKey = "rlAmrGmSYDnnKWKk_kw2IkSpZpiGJuZu25lfQYegp9Q";

            //var hereMapMartixUrl = $"https://matrix.router.hereapi.com/v8/matrix?&apiKey={apiKey}&async=false";
            //var request = new HttpRequestMessage(HttpMethod.Post, hereMapMartixUrl);

            //request.Content = new StringContent(JsonConvert.SerializeObject(model));
            //request.Content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            //var httpClient = new HttpClient();
            //var response = httpClient.SendAsync(request).Result;

            //if (response.StatusCode == System.Net.HttpStatusCode.OK)
            //{
            //var result = JsonConvert.DeserializeObject<RoutingMatrixResponseModel>(response.Content.ReadAsStringAsync().Result);
            var result = JsonConvert.DeserializeObject<RoutingMatrixResponseModel>(response);
            var matrix = result.Matrix;
            var timeMatrix = new int[matrix.NumOrigins, matrix.NumDestinations];

            for (int i = 0; i < matrix.NumOrigins; i++)
            {
                Buffer.BlockCopy(matrix.TravelTimes, i * matrix.NumDestinations * sizeof(int), timeMatrix, i * matrix.NumDestinations * sizeof(int), matrix.NumDestinations * sizeof(int));
            }

            Console.WriteLine(timeMatrix.ToString());

            //}
        }
    }
}
